<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LeoCorpLibrary.Core</name>
    </assembly>
    <members>
        <member name="T:LeoCorpLibrary.Core.ColorsConverter">
            <summary>
            Class containing methods that allows you to convert types of colors.
            </summary>
        </member>
        <member name="M:LeoCorpLibrary.Core.ColorsConverter.RGBtoHSV(System.Int32,System.Int32,System.Int32)">
            <summary>
            Allows you to convert a RGB color into a <see cref="T:LeoCorpLibrary.Core.HSVColor"/>.
            </summary>
            <param name="red">Red.</param>
            <param name="green">Green.</param>
            <param name="blue">Blue.</param>
            <returns>A <see cref="T:LeoCorpLibrary.Core.HSVColor"/> value.</returns>
        </member>
        <member name="M:LeoCorpLibrary.Core.ColorsConverter.RGBtoHSV(System.Drawing.Color)">
            <summary>
            Allows you to convert a RGB <see cref="T:System.Drawing.Color"/> into a <see cref="T:LeoCorpLibrary.Core.HSVColor"/>.
            </summary>
            <param name="color">Couleur (<see cref="T:System.Drawing.Color"/>).</param>
            <returns>A <see cref="T:LeoCorpLibrary.Core.HSVColor"/> value.</returns>
        </member>
        <member name="M:LeoCorpLibrary.Core.ColorsConverter.RGBtoHEX(System.Int32,System.Int32,System.Int32)">
            <summary>
            Allows you to convert a RGB color into a <see cref="T:LeoCorpLibrary.Core.HEXColor"/>.
            </summary>
            <param name="red">Red.</param>
            <param name="green">Green.</param>
            <param name="blue">Blue.</param>
            <returns>A <see cref="T:LeoCorpLibrary.Core.HEXColor"/> value.</returns>
        </member>
        <member name="M:LeoCorpLibrary.Core.ColorsConverter.RGBtoHEX(System.Drawing.Color)">
            <summary>
            Allows you to convert a RGB <see cref="T:System.Drawing.Color"/> into a <see cref="T:LeoCorpLibrary.Core.HEXColor"/>.
            </summary>
            <param name="color">Couleur.</param>
            <returns>A <see cref="T:LeoCorpLibrary.Core.HEXColor"/> value.</returns>
        </member>
        <member name="M:LeoCorpLibrary.Core.ColorsConverter.HEXtoRGB(LeoCorpLibrary.Core.HEXColor)">
            <summary>
            Allows you to convert a <see cref="T:LeoCorpLibrary.Core.HEXColor"/> into a RGB <see cref="T:System.Drawing.Color"/>.
            </summary>
            <param name="hexColor"><see cref="T:LeoCorpLibrary.Core.HEXColor"/> to convert.</param>
            <exception cref="T:LeoCorpLibrary.Core.Exceptions.HEXInvalidValueException"/>
            <returns>A <see cref="T:System.Drawing.Color"/> value.</returns>
        </member>
        <member name="M:LeoCorpLibrary.Core.ColorsConverter.HEXtoHSV(LeoCorpLibrary.Core.HEXColor)">
            <summary>
            Allows you to convert a <see cref="T:LeoCorpLibrary.Core.HEXColor"/> into a <see cref="T:LeoCorpLibrary.Core.HSVColor"/>.
            </summary>
            <param name="hexColor"><see cref="T:LeoCorpLibrary.Core.HEXColor"/> to convert.</param>
            <exception cref="T:LeoCorpLibrary.Core.Exceptions.HEXInvalidValueException"/>
            <returns>A <see cref="T:LeoCorpLibrary.Core.HSVColor"/> value.</returns>
        </member>
        <member name="T:LeoCorpLibrary.Core.HSVColor">
            <summary>
            A structure that contains infos and methods for a HSV Color.
            </summary>
        </member>
        <member name="F:LeoCorpLibrary.Core.HSVColor.Hue">
            <summary>
            Hue.
            </summary>
        </member>
        <member name="F:LeoCorpLibrary.Core.HSVColor.Saturation">
            <summary>
            Saturation.
            </summary>
        </member>
        <member name="F:LeoCorpLibrary.Core.HSVColor.Value">
            <summary>
            Value.
            </summary>
        </member>
        <member name="M:LeoCorpLibrary.Core.HSVColor.FromRGB(System.Drawing.Color)">
            <summary>
            Allows you to create a <see cref="T:LeoCorpLibrary.Core.HSVColor"/> from a <see cref="T:System.Drawing.Color"/>.
            </summary>
            <param name="color"><see cref="T:System.Drawing.Color"/> to convert.</param>
            <returns>A <see cref="T:LeoCorpLibrary.Core.HSVColor"/> value.</returns>
        </member>
        <member name="M:LeoCorpLibrary.Core.HSVColor.FromRGB(System.Int32,System.Int32,System.Int32)">
            <summary>
            Allows you to create a <see cref="T:LeoCorpLibrary.Core.HSVColor"/> from a RGB color.
            </summary>
            <param name="red">Red.</param>
            <param name="green">Green.</param>
            <param name="blue">Blue.</param>
            <exception cref="T:LeoCorpLibrary.Core.Exceptions.RGBInvalidValueException"/>
            <returns>A <see cref="T:LeoCorpLibrary.Core.HSVColor"/> value.</returns>
        </member>
        <member name="T:LeoCorpLibrary.Core.HEXColor">
            <summary>
            A structure that contains infos and methods of a <see cref="T:LeoCorpLibrary.Core.HEXColor"/>.
            </summary>
        </member>
        <member name="F:LeoCorpLibrary.Core.HEXColor.Value">
            <summary>
            Value of the color.
            </summary>
        </member>
        <member name="M:LeoCorpLibrary.Core.HEXColor.FromRGB(System.Drawing.Color)">
            <summary>
            Allows you to create a <see cref="T:LeoCorpLibrary.Core.HEXColor"/> from a <see cref="T:System.Drawing.Color"/>.
            </summary>
            <param name="color"><see cref="T:System.Drawing.Color"/> to convert.</param>
            <returns>A <see cref="T:LeoCorpLibrary.Core.HEXColor"/> value.</returns>
        </member>
        <member name="M:LeoCorpLibrary.Core.HEXColor.FromRGB(System.Int32,System.Int32,System.Int32)">
            <summary>
            Allows you to create a <see cref="T:LeoCorpLibrary.Core.HEXColor"/>) from a RGB Color.
            </summary>
            <param name="red">Red.</param>
            <param name="blue">Blue.</param>
            <param name="green">Green.</param>
            <exception cref="T:LeoCorpLibrary.Core.Exceptions.RGBInvalidValueException"/>
            <returns>A <see cref="T:LeoCorpLibrary.Core.HEXColor"/> value.</returns>
        </member>
        <member name="T:LeoCorpLibrary.Core.Crypt">
            <summary>
            Methods to encrypt/decrypt <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:LeoCorpLibrary.Core.Crypt.Encrypt(System.String,System.String)">
            <summary>
            Encrypts a <see cref="T:System.String"/>.
            </summary>
            <param name="source">The <see cref="T:System.String"/> to encrypt.</param>
            <param name="key">The key that will be used to encrypt and decrypt the string.</param>
            <returns>A <see cref="T:System.String"/> value.</returns>
        </member>
        <member name="M:LeoCorpLibrary.Core.Crypt.Decrypt(System.String,System.String)">
            <summary>
            Decrypts an encrypted <see cref="T:System.String"/>.
            </summary>
            <param name="encrypt">The encrypted <see cref="T:System.String"/>.</param>
            <param name="key">The key that will be used to encrypt and decrypt the string.</param>
            <returns>A <see cref="T:System.String"/> value.</returns>
        </member>
        <member name="T:LeoCorpLibrary.Core.Env">
            <summary>
            Class that contains methods for the user's environnement.
            </summary>
        </member>
        <member name="M:LeoCorpLibrary.Core.Env.GetFilesCount(System.String)">
            <summary>
            Allows you to get the number of files in a directory without including subdirectories.
            </summary>
            <param name="directory">Path of the directory</param>
            <exception cref="T:System.IO.DirectoryNotFoundException"></exception>
            <returns>A <see cref="T:System.Int32"/> value.</returns>
        </member>
        <member name="M:LeoCorpLibrary.Core.Env.GetFilesCount(System.String,System.Boolean)">
            <summary>
            Allows you to get the number of files in a directory offering the possibility to include subdirectories.
            </summary>
            <param name="directory">Path of the directory.</param>
            <param name="includeSubDirectories">Include or not subdirectories.</param>
            <exception cref="T:System.IO.FileNotFoundException"></exception>
            <returns>A <see cref="T:System.Int32"/> value.</returns>
        </member>
        <member name="M:LeoCorpLibrary.Core.Env.GetDirectoriesCount(System.String)">
            <summary>
            Allows you to get number of directories in a directory without including subdirectories.
            </summary>
            <param name="directory">Path of the directory.</param>
            <exception cref="T:System.IO.DirectoryNotFoundException"></exception>
            <returns>A <see cref="T:System.Int32"/> value.</returns>
        </member>
        <member name="M:LeoCorpLibrary.Core.Env.GetDirectoriesCount(System.String,System.Boolean)">
            <summary>
            Allows you to get the number of directories in a directory offering the possibility to include subdirectories.
            </summary>
            <param name="directory">Path of the directory.</param>
            <param name="includeSubDirectories">Include or not subdirectories.</param>
            <exception cref="T:System.IO.DirectoryNotFoundException"></exception>
            <returns>A <see cref="T:System.Int32"/> value.</returns>
        </member>
        <member name="M:LeoCorpLibrary.Core.Env.GetDriveAvailableFreeSpace(System.String,LeoCorpLibrary.Core.UnitType)">
            <summary>
            Allows you to get the available space on a specified drive.
            </summary>
            <param name="drive">Drive.</param>
            <param name="unitType">The unit of the value returned (MB, GB...).</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.IO.DriveNotFoundException"></exception>
            <returns>A <see cref="T:System.Double"/> value.</returns>
        </member>
        <member name="M:LeoCorpLibrary.Core.Env.GetTotalDriveSpace(System.String,LeoCorpLibrary.Core.UnitType)">
            <summary>
            Allows you to get the total space of a drive.
            </summary>
            <param name="drive">Drive.</param>
            <param name="unitType">The unit of the value returned (MB, GB...).</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.IO.DriveNotFoundException"></exception>
            <returns>A <see cref="T:System.Double"/> value.</returns>
        </member>
        <member name="M:LeoCorpLibrary.Core.Env.GetOccupiedDriveSpace(System.String,LeoCorpLibrary.Core.UnitType)">
            <summary>
            Allows you to get the occupied space of a drive.
            </summary>
            <param name="drive">Drive.</param>
            <param name="unitType">The unit of the value returned (MB, GB...).</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.IO.DriveNotFoundException"></exception>
            <returns>A <see cref="T:System.Double"/> value.</returns>
        </member>
        <member name="M:LeoCorpLibrary.Core.Env.GetWindowsVersion">
            <summary>
            Allows you to get the Windows version of the user.
            </summary>
            <remarks>You can now use the <see cref="P:LeoCorpLibrary.Core.Env.WindowsVersion"/> property instead of this method.</remarks>
            <returns>A <see cref="P:LeoCorpLibrary.Core.Env.WindowsVersion"/> value.</returns>
        </member>
        <member name="P:LeoCorpLibrary.Core.Env.WindowsVersion">
            <summary>
            Allows you to get the Windows version of the user.
            </summary>
        </member>
        <member name="M:LeoCorpLibrary.Core.Env.ExecuteAsAdmin(System.Diagnostics.Process)">
            <summary>
            Allows you to launch a program in administrator mode.
            </summary>
            <param name="process">Process to launch as admin.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.IO.FileNotFoundException"></exception>
            <remarks>The 'process' parameter must have a valid path to the programm to launch in admin mode in <see cref="P:System.Diagnostics.Process.StartInfo"/>.</remarks>
        </member>
        <member name="M:LeoCorpLibrary.Core.Env.ExecuteAsAdmin(System.String)">
            <summary>
            Allows you to launch a program in administrator mode.
            </summary>
            <param name="filename">Path to the program to launch in admin mode.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.IO.FileNotFoundException"></exception>
        </member>
        <member name="M:LeoCorpLibrary.Core.Env.CountFileCharacters(System.String)">
            <summary>
            Allows you to count the number of characters in a specified file.
            </summary>
            <param name="fileName">Location of the file.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.IO.FileNotFoundException"></exception>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> value.</returns>
        </member>
        <member name="M:LeoCorpLibrary.Core.Env.CountFileCharactersAsync(System.String)">
            <summary>
            Allows you to count the number of characters in specified file asynchronously.
            </summary>
            <param name="fileName">Location of the file.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.IO.FileNotFoundException"></exception>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> value.</returns>
        </member>
        <member name="M:LeoCorpLibrary.Core.Env.GetUnixTime">
            <summary>
            Allows you to get the current UnixTime.
            </summary>
            <remarks>You can now use the <see cref="P:LeoCorpLibrary.Core.Env.UnixTime"/> property instead of this method.</remarks>
            <returns>A <see cref="T:System.Int32"/> value.</returns>
        </member>
        <member name="M:LeoCorpLibrary.Core.Env.GetUnixTime(System.DateTime)">
            <summary>
            Allows you to get the UnixTime from a specific <see cref="T:System.DateTime"/>.
            </summary>
            <param name="date">Date.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <returns>A <see cref="T:System.Int32"/> value.</returns>
        </member>
        <member name="P:LeoCorpLibrary.Core.Env.UnixTime">
            <summary>
            Allows you to get the current UnixTime.
            </summary>
        </member>
        <member name="M:LeoCorpLibrary.Core.Env.GetAppDataPath">
            <summary>
            Allows you to get the <c>%APPDATA%</c> path.
            </summary>
            <remarks>You can now use the <see cref="P:LeoCorpLibrary.Core.Env.AppDataPath"/> property instead of this method.</remarks>
            <returns>A <see cref="T:System.String"/> value.</returns>
        </member>
        <member name="P:LeoCorpLibrary.Core.Env.AppDataPath">
            <summary>
            Allows you to get the <c>%APPDATA%</c> path.
            </summary>
        </member>
        <member name="T:LeoCorpLibrary.Core.OperatingSystems">
            <summary>
            Operating systems.
            </summary>
        </member>
        <member name="F:LeoCorpLibrary.Core.OperatingSystems.Windows">
            <summary>
            The Windows Operating system.
            </summary>
        </member>
        <member name="F:LeoCorpLibrary.Core.OperatingSystems.macOS">
            <summary>
            The macOS Operating system.
            </summary>
        </member>
        <member name="F:LeoCorpLibrary.Core.OperatingSystems.Linux">
            <summary>
            The Linux Operating system.
            </summary>
        </member>
        <member name="F:LeoCorpLibrary.Core.OperatingSystems.Unknown">
            <summary>
            An unknown Operating system.
            </summary>
        </member>
        <member name="T:LeoCorpLibrary.Core.UnitType">
            <summary>
            Size of files/directories.
            </summary>
        </member>
        <member name="F:LeoCorpLibrary.Core.UnitType.Byte">
            <summary>
            Byte Unit.
            </summary>
        </member>
        <member name="F:LeoCorpLibrary.Core.UnitType.Kilobyte">
            <summary>
            Kilobyte Unit.
            </summary>
        </member>
        <member name="F:LeoCorpLibrary.Core.UnitType.Megabyte">
            <summary>
            Megabyte Unit.
            </summary>
        </member>
        <member name="F:LeoCorpLibrary.Core.UnitType.Gigabyte">
            <summary>
            Gigabyte Unit.
            </summary>
        </member>
        <member name="F:LeoCorpLibrary.Core.UnitType.Terabyte">
            <summary>
            Terabyte Unit.
            </summary>
        </member>
        <member name="F:LeoCorpLibrary.Core.UnitType.Petabyte">
            <summary>
            Petabyte Unit.
            </summary>
        </member>
        <member name="T:LeoCorpLibrary.Core.WindowsVersion">
            <summary>
            Windows Operating Systems.
            </summary>
        </member>
        <member name="F:LeoCorpLibrary.Core.WindowsVersion.Windows7">
            <summary>
            Windows 7 (Version 6.1).
            </summary>
        </member>
        <member name="F:LeoCorpLibrary.Core.WindowsVersion.Windows8">
            <summary>
            Windows 8 (Version 6.2).
            </summary>
        </member>
        <member name="F:LeoCorpLibrary.Core.WindowsVersion.Windows81">
            <summary>
            Windows 8.1 (Version 6.3).
            </summary>
        </member>
        <member name="F:LeoCorpLibrary.Core.WindowsVersion.Windows10">
            <summary>
            Windows 10 (Version 10.0)
            </summary>
        </member>
        <member name="F:LeoCorpLibrary.Core.WindowsVersion.Unknown">
            <summary>
            Unknown operating system.
            </summary>
        </member>
        <member name="T:LeoCorpLibrary.Core.Exceptions.HEXInvalidValueException">
            <summary>
            Is thrown when an HEX color is invalid.
            </summary>
        </member>
        <member name="M:LeoCorpLibrary.Core.Exceptions.HEXInvalidValueException.#ctor">
            <summary>
            Initialize a new instance of the <see cref="T:LeoCorpLibrary.Core.Exceptions.HEXInvalidValueException"/> class.
            </summary>
        </member>
        <member name="M:LeoCorpLibrary.Core.Exceptions.HEXInvalidValueException.#ctor(System.String)">
            <summary>
            Initialize a new instance of the <see cref="T:LeoCorpLibrary.Core.Exceptions.HEXInvalidValueException"/> class with a specified error message.
            </summary>
            <param name="message">Message of the error</param>
        </member>
        <member name="M:LeoCorpLibrary.Core.Exceptions.HEXInvalidValueException.#ctor(System.String,System.Exception)">
            <summary>
            Initialize a new instance of the <see cref="T:LeoCorpLibrary.Core.Exceptions.HEXInvalidValueException"/> class with a specified error message.
            </summary>
            <param name="message">Message of the error.</param>
            <param name="iny.Core.Exceptions.HEXInvalidValueException"/> class with a specified error message.
            </summary>
            <param name="message">Message of the error.</param>
            <param name="innerException">The inner exception that cause this exception.</param>
        </member>
        <member name="T:LeoCorpLibrary.Core.Exceptions.InvalidGuidLenghtException">
            <summary>
            Is thrown when the lenght of a Guid is invalid
            </summary>
        </member>
        <member name="M:LeoCorpLibrary.Core.Exceptions.InvalidGuidLenghtException.#ctor">
            <summary>
            Initialize a new instance of the class <see cref="T:LeoCorpLibrary.Core.Exceptions.InvalidGuidLenghtException"/>.
            </summary>
        </member>
        <member name="M:LeoCorpLibrary.Core.Exceptions.InvalidGuidLenghtException.#ctor(System.String)">
            <summary>
            Initialize a new instance of the class <see cref="T:LeoCorpLibrary.Core.Exceptions.InvalidGuidLenghtException"/> with a specified error message.
            </summary>
            <param name="message">Message of the error</param>
        </member>
        <member name="M:LeoCorpLibrary.Core.Exceptions.InvalidGuidLenghtException.#ctor(System.String,System.Exception)">
            <summary>
            Initialize a new instance of the class <see cref="T:LeoCorpLibrary.Core.Exceptions.InvalidGuidLenghtException"/> with a specified error message.
            </summary>
            <param name="message">Message of the error</param>
            <param name="innerException">The inner exception that cause this exception.</param>
        </member>
        <member name="T:LeoCorpLibrary.Core.Exceptions.RGBInvalidValueException">
            <summary>
            Is thrown when a RGB color is invalid.
            </summary>
        </member>
        <member name="M:LeoCorpLibrary.Core.Exceptions.RGBInvalidValueException.#ctor">
            <summary>
            Initialize a new instance of the <see cref="T:LeoCorpLibrary.Core.Exceptions.RGBInvalidValueException"/> class.
            </summary>
        </member>
        <member name="M:LeoCorpLibrary.Core.Exceptions.RGBInvalidValueException.#ctor(System.String)">
            <summary>
            Initialize a new instance of the <see cref="T:LeoCorpLibrary.Core.Exceptions.RGBInvalidValueException"/> class with a specified error message.
            </summary>
            <param name="message">Message of the error.</param>
        </member>
        <member name="M:LeoCorpLibrary.Core.Exceptions.RGBInvalidValueException.#ctor(System.String,System.Exception)">
            <summary>
            Initialize a new instance of the <see cref="T:LeoCorpLibrary.Core.Exceptions.RGBInvalidValueException"/> class with a specified error message.
            </summary>
            <param name="message">Message of the error.</param>
            <param name="innerException">The inner exception that cause this exception.</param>
        </member>
        <member name="T:LeoCorpLibrary.Core.Extensions.ArrayExtensions">
            <summary>
            Methods that extends arrays.
            </summary>
        </member>
        <member name="M:LeoCorpLibrary.Core.Extensions.ArrayExtensions.Append``1(``0[],``0)">
            <summary>
            Adds an item to an existing array.
            </summary>
            <typeparam name="T">The type of the array.</typeparam>
            <param name="array">The array where the item is going to be append.</param>
            <param name="item">The item which is going to be append in the array.</param>
            <returns>An <see cref="T:System.Array"/>.</returns>
        </member>
        <member name="M:LeoCorpLibrary.Core.Extensions.ArrayExtensions.Append``1(``0[],``0[])">
            <summary>
            Adds items to an existing array.
            </summary>
            <typeparam name="T">The type of the array.</typeparam>
            <param name="array">The array where the items are going to be append.</param>
            <param name="items">The items which are going to be append in the array.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <returns>An <see cref="T:System.Array"/>.</returns>
        </member>
        <member name="M:LeoCorpLibrary.Core.Extensions.ArrayExtensions.RemoveItem``1(``0[],``0)">
            <summary>
            Removes a specific item from an array.
            </summary>
            <typeparam name="T">The type of the array.</typeparam>
            <param name="array">The array where the item is going to be removed.</param>
            <param name="item">The item to remove.</param>
            <returns>An <see cref="T:System.Array"/>.</returns>
        </member>
        <member name="M:LeoCorpLibrary.Core.Extensions.ArrayExtensions.RemoveItem``1(``0[],``0[])">
            <summary>
            Removes a specific item from an array.
            </summary>
            <typeparam name="T">The type of the array.</typeparam>
            <param name="array">The array where the items are going to be removed.</param>
            <param name="items">The items to remove.</param>
            <returns>An <see cref="T:System.Array"/>.</returns>
        </member>
        <member name="T:LeoCorpLibrary.Core.Extensions.IntExtensions">
            <summary>
            Methods that extends the <see cref="T:System.Int32"/> type.
            </summary>
        </member>
        <member name="M:LeoCorpLibrary.Core.Extensions.IntExtensions.IsEven(System.Int32)">
            <summary>
            Determines if the <see cref="T:System.Int32"/> value is even.
            </summary>
            <param name="value">The <see cref="T:System.Int32"/> to check.</param>
            <returns>A <see cref="T:System.Boolean"/> value.</returns>
        </member>
        <member name="M:LeoCorpLibrary.Core.Extensions.IntExtensions.ToDouble(System.Int32)">
            <summary>
            Converts an <see cref="T:System.Int32"/> value to a <see cref="T:System.Double"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int32"/> value to convert.</param>
            <returns>A <see cref="T:System.Double"/> value.</returns>
        </member>
        <member name="T:LeoCorpLibrary.Core.Extensions.StringExtensions">
            <summary>
            Methods that extends the <see cref="T:System.String"/> type.
            </summary>
        </member>
        <member name="M:LeoCorpLibrary.Core.Extensions.StringExtensions.CountWords(System.String)">
            <summary>
            Counts the number of words in a <see cref="T:System.String"/>.
            </summary>
            <param name="value">The <see cref="T:System.String"/> where the words should be counted.</param>
            <returns>A <see cref="T:System.Int32"/> value.</returns>
        </member>
        <member name="M:LeoCorpLibrary.Core.Extensions.StringExtensions.CountWords(System.String,System.String[])">
            <summary>
            Counts the number of words in a <see cref="T:System.String"/>.
            </summary>
            <param name="value">The <see cref="T:System.String"/> where the words should be counted.</param>
            <param name="wordSeparator">The separator of the words. Example: ", ; : ! ? .  ".</param>
            <returns>A <see cref="T:System.Int32"/> value.</returns>
        </member>
        <member name="M:LeoCorpLibrary.Core.Extensions.StringExtensions.Encrypt(System.String,System.String)">
            <summary>
            Encrypts a <see cref="T:System.String"/>.
            </summary>
            <param name="source">The <see cref="T:System.String"/> to encrypt.</param>
            <param name="key">The key that will be used to encrypt and decrypt the string.</param>
            <returns>A <see cref="T:System.String"/> value.</returns>
        </member>
        <member name="M:LeoCorpLibrary.Core.Extensions.StringExtensions.Decrypt(System.String,System.String)">
            <param name="key">The key that will be used to encrypt and decrypt the string.</param>
            <returns>A <see cref="T:System.String"/> value.</returns>
        </member>
        <member name="T:LeoCorpLibrary.Core.GuidGenerator">
            <summary>
            A class that contains methods to generate Guids.
            </summary>
        </member>
        <member name="M:LeoCorpLibrary.Core.GuidGenerator.Generate">
            <summary>
            Generates a new Guid and convert it's value to a string value.
            </summary>
            <returns>A <see cref="T:System.String"/> value.</returns>
        </member>
        <member name="M:LeoCorpLibrary.Core.GuidGenerator.Generate(System.Int32)">
            <summary>
            Generates a new Guid and convert it's value to a string value.
            </summary>
            <param name="lenght">Lenght of the Guid.</param>
            <exception cref="T:LeoCorpLibrary.Core.Exceptions.InvalidGuidLenghtException"></exception>
            <returns>A <see cref="T:System.String"/> value.</returns>
        </member>
        <member name="M:LeoCorpLibrary.Core.GuidGenerator.Generate(System.String)">
            <summary>
            Generates a Guid from a specified <see cref="T:System.String"/>.
            </summary>
            <param name="fromString">Generate the guid from a specified <see cref="T:System.String"/>.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <returns>A <see cref="T:System.String"/> value.</returns>
        </member>
        <member name="M:LeoCorpLibrary.Core.GuidGenerator.Generate(LeoCorpLibrary.Core.GuidGeneratorParameters)">
            <summary>
            Generates a new Guid from <see cref="T:LeoCorpLibrary.Core.GuidGeneratorParameters"/>.
            </summary>
            <param name="guidGeneratorParameters">Parameters of the Guid Generation.</param>
            <exception cref="T:LeoCorpLibrary.Core.Exceptions.InvalidGuidLenghtException"></exception>
            <returns>A <see cref="T:System.String"/> value.</returns>
        </member>
        <member name="M:LeoCorpLibrary.Core.GuidGenerator.Generate(System.String,LeoCorpLibrary.Core.GuidGeneratorParameters)">
            <summary>
            Generates a new Guid from string and from <see cref="T:LeoCorpLibrary.Core.GuidGeneratorParameters"/>.
            </summary>
            <param name="fromString">Generate the guid from a specified <see cref="T:System.String"/>.</param>
            <param name="guidGeneratorParameters">Parameters of the Guid Generation.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:LeoCorpLibrary.Core.Exceptions.InvalidGuidLenghtException"></exception>
            <returns>A <see cref="T:System.String"/> value.</returns>
        </member>
        <member name="T:LeoCorpLibrary.Core.GuidGeneratorParameters">
            <summary>
            A class that can be used in <see cref="M:LeoCorpLibrary.Core.GuidGenerator.Generate"/> as an argument.
            </summary>
        </member>
        <member name="M:LeoCorpLibrary.Core.GuidGeneratorParameters.#ctor">
            <summary>
            The constructor for <see cref="T:LeoCorpLibrary.Core.GuidGeneratorParameters"/>.
            </summary>
        </member>
        <member name="P:LeoCorpLibrary.Core.GuidGeneratorParameters.Lenght">
            <summary>
            Lenght of the Guid to generate.
            </summary>
        </member>
        <member name="P:LeoCorpLibrary.Core.GuidGeneratorParameters.WithHyphens">
            <summary>
            Include or not hyphens, such as: <c>00000000-0000-0000-0000-00000000</c>
            </summary>
        </member>
        <member name="P:LeoCorpLibrary.Core.GuidGeneratorParameters.WithBraces">
            <summary>
            Include or not braces, such as: <c>{00000000-0000-0000-0000-00000000}</c>
            </summary>
        </member>
        <member name="PParameters.WithBraces">
            <summary>
            Include or not braces, such as: <c>{00000000-0000-0000-0000-00000000}</c>
            </summary>
        </member>
        <member name="P:LeoCorpLibrary.Core.GuidGeneratorParameters.UseUpperCaseOnly">
            <summary>
            Use only upper case if true. Uses only lower case if false.
            </summary>
        </member>
        <member name="T:LeoCorpLibrary.Core.Maths">
            <summary>
            Class that contains methods relatives to maths.
            </summary>
        </member>
        <member name="M:LeoCorpLibrary.Core.Maths.Sum(System.Double[])">
            <summary>
            Allows you to do a sum of <see cref="T:System.Double"/> numbers.
            </summary>
            <param name="args">Numbers.</param>
            <returns>A <see cref="T:System.Double"/> value.</returns>
        </member>
        <member name="M:LeoCorpLibrary.Core.Maths.GetLowestNumber(System.Double[])">
            <summary>
            Allows you to get the lowest number from specified <see cref="T:System.Double"/> numbers.
            </summary>
            <param name="numbers">Numbers.</param>
            <returns>A <see cref="T:System.Double"/> value.</returns>
        </member>
        <member name="M:LeoCorpLibrary.Core.Maths.GetBiggestNumber(System.Double[])">
            <summary>
            Allows you to get the biggest number from specified <see cref="T:System.Double"/> numbers.
            </summary>
            <param name="numbers">Numbers.</param>
            <returns>A <see cref="T:System.Double"/> value.</returns>
        </member>
        <member name="T:LeoCorpLibrary.Core.Maths.Circle">
            <summary>
            Class that coontains methods for circles.
            </summary>
        </member>
        <member name="M:LeoCorpLibrary.Core.Maths.Circle.GetArea(System.Double)">
            <summary>
            Allows you to get the area of a circle.
            </summary>
            <param name="radius">Circle's radius</param>
            <returns>A <see cref="T:System.Double"/> value.</returns>
        </member>
        <member name="M:LeoCorpLibrary.Core.Maths.Circle.GetPerimeter(System.Double)">
            <summary>
            Allows you to get the perimeter of a circle.
            </summary>
            <param name="radius">Circle's radius.</param>
            <returns>A <see cref="T:System.Double"/> value.</returns>
        </member>
        <member name="T:LeoCorpLibrary.Core.Maths.Triangle">
            <summary>
            Class that contains methods for triangles.
            </summary>
        </member>
        <member name="M:LeoCorpLibrary.Core.Maths.Triangle.GetArea(System.Double,System.Double)">
            <summary>
            Allows you to get the area of triangle from it's height and width/base.
            </summary>
            <param name="height">Triangle's height.</param>
            <param name="width">Triangle's base/width.</param>
            <returns>A <see cref="T:System.Double"/> value.</returns>
        </member>
        <member name="M:LeoCorpLibrary.Core.Maths.Triangle.GetPerimeter(System.Double,System.Double,System.Double)">
            <summary>
            Allows you to get the perimeter of a triangle.
            </summary>
            <param name="side1">Triangle's side.</param>
            <param name="side2">Triangle's side.</param>
            <param name="side3">Triangle's side.</param>
            <returns>A <see cref="T:System.Double"/> value.</returns>
        </member>
        <member name="M:LeoCorpLibrary.Core.Maths.Triangle.IsBuildable(System.Double,System.Double,System.Double)">
            <summary>
            Allows you to know if a triangle is buildable or not.
            </summary>
            <param name="side1">Triangle's side.</param>
            <param name="side2">Triangle's side.</param>
            <param name="side3">Triangle's side.</param>
            <returns>A <see cref="T:Ssummary>
        </member>
        <member name="M:LeoCorpLibrary.Core.Maths.Cube.GetVolume(System.Double,System.Double)">
            <summary>
            Allows you to get the volume of a cube/cuboid.
            </summary>
            <param name="side">Cube's side.</param>
            <param name="height">Cube's height.</param>
            <returns>A <see cref="T:System.Double"/> value.</returns>
        </member>
        <member name="M:LeoCorpLibrary.Core.Maths.Cube.GetVolume(System.Double)">
            <summary>
            Allows you to get the volume of cube.
            </summary>
            <param name="side">Cube's side.</param>
            <returns>A <see cref="T:System.Double"/> value.</returns>
        </member>
        <member name="M:LeoCorpLibrary.Core.Maths.Cube.GetEdge(System.Double)">
            <summary>
            Allows you to get the edge of a cube.
            </summary>
            <param name="area">Area.</param>
            <returns>A <see cref="T:System.Double"/> value.</returns>
        </member>
        <member name="T:LeoCorpLibrary.Core.Maths.Cylinder">
            <summary>
            Class that contains methods for cylinders.
            </summary>
        </member>
        <member name="M:LeoCorpLibrary.Core.Maths.Cylinder.GetVolume(System.Double,System.Double)">
            <summary>
            Allows you to get the volume of a cylinder.
            </summary>
            <param name="radius">Radius.</param>
            <param name="height">Height.</param>
            <returns>A <see cref="T:System.Double"/> value.</returns>
        </member>
        <member name="M:LeoCorpLibrary.Core.Maths.Cylinder.GetHeight(System.Double,System.Double)">
            <summary>
            Allows you to get the height of cylinder.
            </summary>
            <param name="area">Area.</param>
            <param name="radius">Radius.</param>
            <returns>A <see cref="T:System.Double"/> value.</returns>
        </member>
        <member name="M:LeoCorpLibrary.Core.Maths.Cylinder.GetBaseArea(System.Double)">
            <summary>
            Allows you to get the area of cylinder.
            </summary>
            <param name="radius">Radius.</param>
            <returns>A <see cref="T:System.Double"/> value.</returns>
        </member>
        <member name="T:LeoCorpLibrary.Core.Maths.Pyramid">
            <summary>
            Class that contains methods for pyramids.
            </summary>
        </member>
        <member name="M:LeoCorpLibrary.Core.Maths.Pyramid.GetVolume(System.Double,System.Double,System.Double)">
            <summary>
            Allows you to get the volume of a pyramid.
            </summary>
            <param name="lenght">Lenght of the pyramid.</param>
            <param name="width">Width of the pyramid.</param>
            <param name="height">Height of the pyramid.</param>
            <returns>A <see cref="T:System.Double"/> value.</returns>
        </member>
        <member name="M:LeoCorpLibrary.Core.Maths.Pyramid.GetHeight(System.Double,System.Double,System.Double)">
            <summary>
            Allows you to get the height of a pyramid.
            </summary>
            <param name="width">Width of the pyramid.</param>
            <param name="lenght">Lenght of the pyramid.</param>
            <param name="volume">Volume.</param>
            <returns>A <see cref="T:System.Double"/> value.</returns>
        </member>
        <member name="M:LeoCorpLibrary.Core.Maths.Pyramid.GetLenghtBase(System.Double,System.Double)">
            <summary>
            Allows you to get the lenght of the base of a pyramid.
            </summary>
            <param name="areaBase">Base's area.</param>
            <param name="width">Width of the pyramid.</param>
            <returns>A <see cref="T:System.Double"/> value.</returns>
        </member>
        <member name="M:LeoCorpLibrary.Core.Maths.Pyramid.GetWidthBase(System.Double,System.Double)">
            <summary>
            Allows you to get hte width of the base of a pyramid.
            </summary>
            <param name="areaBase">Base's are.</param>
            <param name="lenght">Lenght of the pyramid.</param>
            <returns>A <see cref="T:System.Double"/> value.</returns>
        </member>
        <member name="T:LeoCorpLibrary.Core.NetworkConnection">
            <summary>
            Class that contains methods to get and test the user's Internet connection.
            </summary>
        </member>
        <member name="M:LeoCorpLibrary.Core.NetworkConnection.IsAvailable">
            <summary>
            <para>Allows you to know if the user is connected to Internet.</para>
            <para>The connection is tested by default on https://bing.com.</para>
            </summary>
            <returns>A <see cref="T:System.Boolean"/> value.</returns>
        </member>
        <member name="M:LeoCorpLibrary.Core.NetworkConnection.IsAvailableAsync">
            <summary>
            <para>Allows you to know if the user is connected to Internet asynchronously.</para>
            <para>The connection is tested by default on https://bing.com.</para>
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> value.</returns>
        </member>
        <member name="M:LeoCorpLibrary.Core.NetworkConnection.IsAvailableTestSite(System.String)">
            <summary>
            <para>Allows you to know if the user is connected to Internet.</para>
            <para>The connection is tested on the specified website.</para>
            </summary>
            <param name="site">Website where the connection is tested.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <returns>A <see cref="T:System.Boolean"/> value.</returns>
        </member>
        <member name="M:LeoCorpLibrary.Core.NetworkConnection.IsAvailableTestSiteAsync(System.String)">
            <summary>
            <para>Allows you to know if the user is connected to Internet asynchronously.</para>
            <para>The connection is tested on the specified website.</para>
            </summary>
            <param name="site">Website where the connection is tested.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> value.</returns>
        </member>
        <member name="T:LeoCorpLibrary.Core.Password">
            <summary>
            Class that contains method to generate passwords.
            </summary>
        </member>
        <member name="M:LeoCorpLibrary.Core.Password.Generate(System.Int32,System.String,System.String)">
            <summary>
            Generates a password.
            </summary>
            <param name="lenght">Lenght of the password.</param>
            <param name="chars">Characters that can be in the generated password.</param>
            <param name="separator">Separator of the characters.</param>
            <exception cref="T:System.Exception"></exception>
            <returns>A <see cref="T:System.String"/> value.</returns>
        </member>
        <member name="M:LeoCorpLibrary.Core.Password.GenerateAsync(System.Int32,System.String,System.String)">
            <summary>
            Generates a password asynchronously.
            </summary>
            <param name="lenght">Lenght of the password.</param>
            <param name="chars">Characters that can be in the generated password.</param>
            <param name="separator">Separator of the characters.</param>
            <exception cref="T:System.Exception"></exception>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> value.</returns>
        </member>
        <member name="M:LeoCorpLibrary.Core.Password.Generate(System.Int32,LeoCorpLibrary.Core.PasswordPresets)">
            <summary>
            Generates a password.
            </summary>
            <param name="lenght">Lenght of the password.</param>
           2,LeoCorpLibrary.Core.PasswordPresets)">
            <summary>
            Generates a password.
            </summary>
            <param name="lenght">Lenght of the password.</param>
            <param name="passwordPresets">The preset used for the password.</param>
            <exception cref="T:System.Exception"></exception>
            <returns>A <see cref="T:System.String"/> value.</returns>
        </member>
        <member name="M:LeoCorpLibrary.Core.Password.GenerateAsync(System.Int32,LeoCorpLibrary.Core.PasswordPresets)">
            <summary>
            Generates a password asynchronously.
            </summary>
            <param name="lenght">Lenght of the password.</param>
            <param name="passwordPresets">The preset used for the password.</param>
            <exception cref="T:System.Exception"></exception>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> value.</returns>
        </member>
        <member name="T:LeoCorpLibrary.Core.PasswordPresets">
            <summary>
            Presets that can be used for password generation.
            </summary>
        </member>
        <member name="F:LeoCorpLibrary.Core.PasswordPresets.Simple">
            <summary>
            The "Simple" preset generates a password with simple characters.
            </summary>
        </member>
        <member name="F:LeoCorpLibrary.Core.PasswordPresets.Complex">
            <summary>
            The "Complex" preset generates a password with unusual, hard and complex characters.
            </summary>
        </member>
        <member name="T:LeoCorpLibrary.Core.Update">
            <summary>
            Class that contains methods to help you implement an update system to your product.
            </summary>
        </member>
        <member name="M:LeoCorpLibrary.Core.Update.IsAvailable(System.String,System.String)">
            <summary>
            Allows you to verify if updates are available.
            </summary>
            <param name="version">Current software version.</param>
            <param name="lastVersion">Latest software version.</param>
            <returns>A <see cref="T:System.Boolean"/> value.</returns>
        </member>
        <member name="M:LeoCorpLibrary.Core.Update.GetLastVersion(System.String)">
            <summary>
            Allows you to get the latest version of the software from a .txt file.
            </summary>
            <param name="lastVersionFileLink">Link of the file where the lastest version is stocked.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.Exception"></exception>
            <returns>A <see cref="T:System.String"/> value.</returns>
        </member>
        <member name="M:LeoCorpLibrary.Core.Update.GetLastVersionAsync(System.String)">
            <summary>
            Allows you to get the lastest version of the software from a .txt file asynchronously.
            </summary>
            <param name="lastVersionFileLink">Link of the file where the lastest version is stocked.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.Exception"></exception>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> value.</returns>
        </member>
    </members>
</doc>
